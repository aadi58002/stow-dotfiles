;; ~/.config/emacs/templates

;; Available everywhere
fundamental-mode
(today (format-time-string "%Y-%m-%d"))
(shrug "¯\_(ツ)_/¯")

emacs-lisp-mode
(autoload ";;;###autoload")
(header ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
        " -- " p " -*- lexical-binding: t -*-" n
        ";;; Commentary:" n ";;; Code:" n n)
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " ends here" n)

;; Available c++-mode and c++-ts-mode
c++-mode c++-ts-mode
(chef "#include <bits/stdc++.h>" n n "using namespace std;" n n "int main(int argc, char *argv[]) {" n> "ios_base::sync_with_stdio(false);" n> "cin.tie(nullptr);" n> "int testcase;" n> "cin >> testcase;" n> "while(testcase--){" n> q n "  }" n> "return 0;" n "}")
(cp "#include <bits/stdc++.h>" n n "using namespace std;" n n "class Solution {" n "public:" n n "};" n n n "int main() {" n> "ios_base::sync_with_stdio(false);" n> "cin.tie(nullptr);" n> q n> "return 0;" n "}")

;; Available rustic-mode
rust-ts-mode
(cp "use std::io::{self, Write, BufRead};" n "macro_rules! input {" n "() => (std::io::stdin().lock().lines().next().map_or(Err(io::Error::new(io::ErrorKind::UnexpectedEof, \"Input BufRead reached EOF before\".to_string())), |line| line).unwrap());" n> "($($arg:tt)*) => ({ std::io::stdout().write_fmt(format_args!($($arg)*)).unwrap(); std::io::stdout().flush().unwrap(); input!() });" n "}" n n "fn main() {" n> q n "}")

;; Available prog-mode
prog-mode
(!! "#!/usr/bin/env")
(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

;; Available text-mode
text-mode
(box "┌─" (make-string (length str) ?─) "─┐" n
     "│ " (s str)                       " │" n
     "└─" (make-string (length str) ?─) "─┘" n)
(abox "+-" (make-string (length str) ?-) "-+" n
      "| " (s str)                       " |" n
      "+-" (make-string (length str) ?-) "-+" n)
(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)

;; Available text-mode
text-mode
(make-table (p (read-number "Rows: ") rows noinsert)
       (p (read-number "Cols: ") cols noinsert)
       "| " (p "  ") (* (1- cols) " | " (p "  ")) " |" n
       "|" (* cols "----|") n
       (* rows "| " (p "  ") (* (1- cols) " | " (p "  ")) " |" n))

org-mode
(caption "#+caption: ")
(drawer ":" p ":" n r ":end:")
(begin "#+begin_" (s name) n> r> n "#+end_" name)
(quote "#+begin_quote" n> r> n "#+end_quote")
(sidenote "#+begin_sidenote" n> r> n "#+end_sidenote")
(marginnote "#+begin_marginnote" n> r> n "#+end_marginnote")
(example "#+begin_example" n> r> n "#+end_example")
(center "#+begin_center" n> r> n "#+end_center")
(ascii "#+begin_export ascii" n> r> n "#+end_export")
(html "#+begin_export html" n> r> n "#+end_export")
(latex "#+begin_export latex" n> r> n "#+end_export")
(comment "#+begin_comment" n> r> n "#+end_comment")
(verse "#+begin_verse" n> r> n "#+end_verse")
(src "#+begin_src " q n r n "#+end_src")
(gnuplot "#+begin_src gnuplot :var data=" (p "table") " :file " (p "plot.png") n r n "#+end_src" :post (org-edit-src-code))
(elisp "#+begin_src emacs-lisp" n r n "#+end_src" :post (org-edit-src-code))
(inlsrc "src_" p "{" q "}")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
